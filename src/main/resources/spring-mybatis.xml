<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--扫描service目录下的类，并将对象存储在IoC容器中-->
    <context:component-scan base-package="com.shh.myjavaee.service"/>
    <!--使用注解驱动-->
    <!--<context:annotation-config/>-->

    <!--加载属性文件-->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-resource-not-found="true"/>

    <!--配置数据库连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${database.driver}"/>
        <property name="jdbcUrl" value="${database.url}"/>
        <property name="user" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
        <!--连接池初始化连接数-->
        <property name="initialPoolSize" value="2"/>
        <!--连接池中保留的最小连接数-->
        <property name="minPoolSize" value="2"/>
        <!--连接池中保留的最大连接数-->
        <property name="maxPoolSize" value="12"/>
        <!--当连接池中的连接耗尽的时候时获取的新连接数-->
        <property name="acquireIncrement" value="2"/>
        <!--最大空闲时间（单位秒），超时则被回收-->
        <property name="maxIdleTime" value="30"/>
    </bean>
    <!--集成MyBatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--MyBatis配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--MyBatis映射器目录-->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
    </bean>
    <!--采用自动扫描方式创建 mapper bean-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描的目录-->
        <property name="basePackage" value="com.shh.myjavaee.dao"/>
<!--        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
        <!--扫描使用了Repository注解的类-->
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>

    <!--Spring中基于xml的声明式事务配置-->
    <!--配置事务的通知-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置事务通知模板，即哪些方法需要使用事务-->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--事务的AOP相关配置-->
    <aop:config>
        <!--定义切入点表达式-->
        <aop:pointcut id="pt" expression="execution(* com.shh.myjavaee.service.impl.*.*(..))"/>
        <!--建立切点表达式和事务的通知的关系-->
        <aop:advisor advice-ref="advice" pointcut-ref="pt"/>
    </aop:config>
</beans>